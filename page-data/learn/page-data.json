{"componentChunkName":"component---src-templates-learn-tsx","path":"/learn/","webpackCompilationHash":"bc08c68d66b214ed18ef","result":{"data":{"markdownRemark":{"html":"<p>Whether you are an experienced programmer or not, this website is intended for\neveryone who wishes to learn the Prism programming language as soon as possible.</p>\n<p>Note that, this guide is for the prototype version of Prism and doesn't cover\nall of Prism and topics described here are explained in very simple terms -\nterms that might not be used by Prism internally to refer to them.\nSince Prism is currently not yet released to the public, the language can have\ndrastical changes with every iteration and consequently this guide will have to\nchange too. You need to have an open mind if you want to learn Prism in its early stage.</p>\n<h2>Hello, world!</h2>\n<p>To print an object in Prism, just write:</p>\n<pre><code class=\"language-prism\">println(\"Hello, World!\")\n</code></pre>\n<h2>Variables and Types</h2>\n<p>Prism is not statically typed. You don't need to declare the type of variable\nwhile declaring it. The Prism interpreter can infer the type based off of the\ntype of the assigned value.</p>\n<p>Prism uses the <code>let</code> keyword to declare variables. And you can reassign values\nto these variables as needed.</p>\n<p>For example, first we declare the variable <code>everything</code> and assign it to <code>42</code>.\nAnd then we can reassign it to <code>\"is possible\"</code>.</p>\n<pre><code class=\"language-prism\">let everything = 42;\neverything = \"is possible\";\n</code></pre>\n<h3>None</h3>\n<p>The <code>None</code> data type is used internally for objects which doesn't have any\nvalue.\nIn some languages, a reference type variable can be declared without providing\nan initial explicit value. In these cases, the variables are usually assigned\n<code>None</code> value. Prism variables can't hold <code>None</code> values. This means that the\nfollowing snippet is invalid:</p>\n<pre><code class=\"language-prism\">let response = null;\n</code></pre>\n<h3>Boolean</h3>\n<p>Boolean is a data type that holds only one bit of information. It can be\neither <code>true</code> or <code>false</code>.</p>\n<p>In the example below, <code>isValid</code> is a boolean variable with the value of <code>true</code>:</p>\n<pre><code class=\"language-prism\">let isValid = true;\n</code></pre>\n<h3>Numbers</h3>\n<p>Prism, currently in the prototype version, only supports one type of number -\nintegers.</p>\n<p>In the example below, <code>count</code> is a variable of assigned an initial value of\n<code>13</code>:</p>\n<pre><code class=\"language-prism\">let count = 13;\n</code></pre>\n<h3>Characters</h3>\n<p>Character is a data type that can only hold one character. Characters in Prism\nare defined with single quotes.</p>\n<pre><code class=\"language-prism\">let hashTag = '#';\n</code></pre>\n<h3>Strings</h3>\n<p>A String in Prism, as with most other languages, is a sequence of characters.\nStrings in Prism are defined with double quotes.</p>\n<pre><code class=\"language-prism\">let language = \"Prism\";\n</code></pre>\n<h3>Lists</h3>\n<p>Lists are very similar to arrays. They can contain any type of variables, and\nthey can contain as many variables as you wish.</p>\n<p>In the example below, <code>magicNumbers</code> is a Prism list that contains both <code>Number</code>\nand <code>String</code> values.</p>\n<pre><code class=\"language-prism\">let magicNumbers = [ 1337, \"0x8BADF00D\", 42 ];\n</code></pre>\n<p>List elements are indexed from 0 and can be accessed in the same way it's\naccessed in most languages.</p>\n<pre><code class=\"language-prism\">magicNumbers[1] # 0x8BADF00D\n</code></pre>","frontmatter":{"title":"Learn the Prism programming language","description":"A crash course on Prism. Learn the Prism programming language in a few minutes."},"tableOfContents":"<ul>\n<li><a href=\"//#hello-world\">Hello, world!</a></li>\n<li>\n<p><a href=\"//#variables-and-types\">Variables and Types</a></p>\n<ul>\n<li><a href=\"//#none\">None</a></li>\n<li><a href=\"//#boolean\">Boolean</a></li>\n<li><a href=\"//#numbers\">Numbers</a></li>\n<li><a href=\"//#characters\">Characters</a></li>\n<li><a href=\"//#strings\">Strings</a></li>\n<li><a href=\"//#lists\">Lists</a></li>\n</ul>\n</li>\n</ul>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"source":"learn","slug":"/"}}}